---
title: "Test your setup"
---

In this task, we will test if your setup is complete and working. You will also already perform the first steps of using Git version control and GitHub.


## Step 1: Accept invitation from GitHub

::: {.callout-important}
# No email from GitHub?

Confirm that you have [completed the pre-course survey](04-survey.qmd) and let me know on Element that you did not yet receive an email from GitHub to accept the invitation to the `gitforsci-cis` organization. I will send you an invitation.
:::

1. Open your email that you used to register for your GitHub account.
2. Fine the email from GitHub with the subject "[GitHub] @larnsce invited you to join the 'gitforsci-cis' organization".
3. Click on the link in the email to accept the invitation and work through the steps that follow in your browser to accept the invitation.

![](images/screenshot-github-invitation.png){width=100%}

## Step 2: Create a bookmark

1. Open the landing page for the GitHub organization 'gitforsci-cis': <https://github.com/gitforsci-cis>

![](images/screenshot-github-landing-page.png){width=100%}

2. Bookmark this page in your browser. 

![](images/screenshot-bookmark-github.png){width=100%}

3. Organize the bookmark into a folder called "gitforsci-cis" or similar. 

![](images/screenshot-bookmark-folder.png){width=100%}

4. Use this folder to add other bookmarks that are relevant for this workshop (e.g. the workshop website)

![](images/screenshot-bookmark-folder-bar.png){width=100%}

## Step 3: Clone a repository

1. Open the landing page for the GitHub organization 'gitforsci-cis': <https://github.com/gitforsci-cis> (try to use your bookmark)

2. Navigate down the page to the section "Repositories" and use the search field to find the repository called `01-setup-rainbow-train-USERNAME` where USERNAME is your GitHub username.

![](images/03-02-01-screenshot-github-repo.png){width=100%}

3. Click on the repository name to open it.

::: {.callout-important}
# No repository with your username?

Let me know on Element that your repository is not there. I will create it for you.
:::

![](images/03-02-02-screenshot-github-repo){width=100%}

4. Click on the green "Code" button.

![](images/03-03-screenshot-github-repo-name.png){width=100%}

5. Copy the HTTPS URL to your clipboard by clicking on the clipboard sign.

![](images/03-04-screenshot-github-code-button.png){width=100%}

6. Open the RStudio IDE on your laptop.

::: {.callout-note}
I am working on MacOS, but the steps should be similar on Windows. 
:::

![](images/03-06-rstudio.png){width=100%}

7. Click on [File > New Project]{.highlight-yellow} in the top menu bar

![](images/03-07-rstudio-new-project.png){width=100%}

8. Click on Version Control.

![](images/03-08-rstudio-new-project-version-control.png){width=100%}

9. Click on Git.

![](images/03-09-rstudio-new-project-git.png){width=100%}

10. Click on [Browse...]{.highlight-yellow} button.

![](images/03-10-rstudio-new-project-git-browse.png){width=100%}

11. Create a folder structure for Git repositories (e.g. `~/Documents/gitrepos/gh-org-gitforsci-cis`)

::: {.callout-note}
# Folder structure for Git repositories and naming conventions

I highly recommend storing folders that are Git repositories separate from other folders. This will help you to keep track of your Git repositories and avoid confusion with other folders. 

Create this directory structure locally on your laptop and not in folders that are synced with cloud storage (e.g. Google Drive, Dropbox, OneDrive, etc.).

In your directory structure, you can create a folder called `gitrepos`. Inside this folder, you can create subfolders for each GitHub organization you are working with (e.g. `gh-org-gitforsci-cis`). A subfolder for your personal profile would be `gh-rainbow-train`. If you also work with GitLab or other Git hosting platforms, use the abbreviation for the platform in the folder name  (e.g. `gitrepos/gh-rainbow-train`, `gitrepos/gl-rainbow-train`, etc.).

This strategy will help you to keep track of your Git repositories and the respective platforms and organisations they belong to. 
:::

12. Paste the HTTPS URL from GitHub into the "Repository URL" field.

![](images/03-11-rstudio-new-project-git-url.png){width=100%}

13. Click on the "Create Project" button.

![](images/03-12-rstudio-new-project-git-create.png){width=100%}

14. Find the Files tab in the bottom right pane of RStudio.

![](images/03-13-rstudio-files-tab.png){width=100%}

## Step 4: Introduce yourself to Git

1. In the Files tab, find the file called `git-configuration.qmd` and click on it to open it in the editor pane (top left window).

2. Follow the instructions inside the file to introduce yourself to Git.

## Step 5: Commit and push your changes

1. Navigate to the Git pane in the top-right window of RStudio 

![](images/05-01-rstudio-git-pane.png){width=100%}

2. Check the box next to the git-configuration.qmd and git-configuration.html file to **stage** them for **commit**

![](images/05-02-rstudio-git-pane-stage.png){width=100%}

3. Click on the "Commit" button. 

![](images/05-03-rstudio-git-pane-commit.png){width=100%}

::: callout-note

A new window will open. In the top left corner, you will see the files that you have staged for commit. In the bottom windows, you can see the changes you made in the file. The top right corner shows the "Commit message" which cannot be blank. Each Commit requires a Commit message.

:::

4. Enter commit message in the "Commit message" field. For example: "complete git configuration"

![](images/05-04-rstudio-git-pane-commit-message.png){width=100%}

5. Click on the "Commit" button 

![](images/05-05-rstudio-git-pane-commit-message.png){width=100%}

6. Close the window that pops up.

![](images/05-06-rstudio-git-pane-commit-message.png){width=100%}

7. Click on the "Push" button

::: callout-note
Above the top left window, you will now see the sentence "Your branch is ahead of 'origin/main' by 1 commit". This means that you have made changes to your local repository that are not yet pushed to GitHub. It also means that your Commit was successful.
:::

![](images/05-07-rstudio-git-pane-push.png){width=100%}

8. Enter your GitHub username and [GitHub Personal Access Token (PAT)]{.highlight-yellow} in the "Username" and ["Password"]{.highlight-yellow} fields.

::: callout-important
## Use your GitHub Personal Access Token (PAT) for the Password

You need to enter the GitHub Personal Access Token (PAT) as a password. You created it in [step 5 of the pre-course work](05-github-pat) to authenticate your GitHub account and push your changes to GitHub.
:::

9. Does the pop window say `HEAD -> main` as the final statement? Close it. [If not, copy what it says and get in touch on Element now.]{.highlight-yellow}

![](images/05-09-rstudio-git-pane-push.png){width=100%}

10. Verify that the changes have been pushed to GitHub by refreshing the page in your browser.

::: callout-note
Is the window in the top left empty? This means that you have no changes to commit.

Has the sentence "Your branch is ahead of 'origin/main' by 1 commit" disappeared? This means that your changes have been pushed to GitHub successfully.
:::

![](images/05-10-rstudio-git-pane-push.png){width=100%}

## Step 6: Open an issue on GitHub

1. Open the landing page for the GitHub organization 'gitforsci-cis': <https://github.com/gitforsci-cis> (try to use your bookmark)

2. Navigate down the page to the section "Repositories" and use the search field to find the repository called `01-setup-rainbow-train-USERNAME` where USERNAME is your GitHub username.

3. Click on the repository name to open it.

4. Click on the "Issues" tab.

![](images/06-04-screenshot-github-issues.png){width=100%}

5. Click on the green "New issue" button.

![](images/06-05-screenshot-github-new-issue.png){width=100%}

6. In the "Add a title" field write: "Completed test setup tasks".

![](images/06-06-screenshot-github-new-issue-title.png){width=100%}

7. In the "Add a description" field, leave me a comment and tag the course instructor @larnsce.

![](images/06-07-screenshot-github-new-issue-title.png){width=100%}

8. In the "Assignees" field, assign yourself by selecting your GitHub username.

![](images/06-08-screenshot-github-new-issue-title.png){width=100%}


Congratulations! Your setup is complete and you have mastered the key steps of using Git and GitHub. Now onto some [important reading](08-big-picture) and I will see you in class. 